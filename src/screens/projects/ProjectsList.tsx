import React, { useState, useEffect } from 'react';
import { 
  View, 
  Text, 
  FlatList, 
  TouchableOpacity, 
  StyleSheet, 
  ActivityIndicator,
  Alert
} from 'react-native';
import { useProjects } from '../../hooks/useProjects';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
const ProjectItem = ({ project, onPress, onDelete }) => {
  if (!project) return null;
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
  const formatDate = (date) => {
    if (!date) return '–î–∞—Ç–∞ –Ω–µ–≤—ñ–¥–æ–º–∞';
    try {
      const d = new Date(date);
      return `${d.getDate().toString().padStart(2, '0')}.${(d.getMonth() + 1).toString().padStart(2, '0')}.${d.getFullYear()}`;
    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏:', e);
      return '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏';
    }
  };

  // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ —Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–µ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –¥–ª—è —Å–ª–æ–≤–∞
  const calculationsCount = project.calculations?.length || 0;
  const getCalculationCountSuffix = (count) => {
    if (count === 1) return '';
    if (count >= 2 && count <= 4) return '–∏';
    return '—ñ–≤';
  };
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å—É —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å
  const getStatusText = () => {
    switch(project.status) {
      case 'planned': return '–ù–µ –ø–æ—á–∞—Ç–æ';
      case 'in_progress': return '–í –ø—Ä–æ—Ü–µ—Å—ñ';
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      case 'archived': return '–ê—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ';
      default: return '–ù–µ–≤—ñ–¥–æ–º–æ';
    }
  };
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
  const getProgress = () => {
    // –Ø–∫—â–æ –ø—Ä–æ–≥—Ä–µ—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–≤–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
    if (typeof project.progress === 'number') {
      return project.progress;
    }
    
    // –Ü–Ω–∞–∫—à–µ –≤–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç—É—Å—É
    switch(project.status) {
      case 'planned': return 0;
      case 'completed': return 100;
      case 'in_progress': return 70;
      case 'archived': return 100;
      default: return 0;
    }
  };
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—É –¥–∞—Ç—É –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏
  const getDateLabel = () => {
    if (project.endDate) return `–ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${formatDate(project.endDate)}`;
    if (project.startDate) return `–ü–æ—á–∞—Ç–æ–∫: ${formatDate(project.startDate)}`;
    return `–°—Ç–≤–æ—Ä–µ–Ω–æ: ${formatDate(project.createdAt)}`;
  };
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø—Ä—è–∂—ñ
  const getYarnType = () => {
    // TODO: –¥–æ–¥–∞—Ç–∏ –ø–æ–ª–µ –∑ —Ç–∏–ø–æ–º –ø—Ä—è–∂—ñ –≤ –º–æ–¥–µ–ª—å
    // –ù–∞—Ä–∞–∑—ñ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä–Ω–µ–º–æ dummy –¥–∞–Ω—ñ
    const dummyYarnTypes = ['Merino Wool', 'Alpaca Blend', 'Sock Yarn', 'Cotton Blend'];
    return dummyYarnTypes[Math.floor(Math.random() * dummyYarnTypes.length)];
  };
  
  const progress = getProgress();
  
  return (
    <View style={styles.projectItem}>
      <View style={styles.projectContent}>
        <Text style={styles.projectName}>üîµ {project.name || '–ë–µ–∑ –Ω–∞–∑–≤–∏'}</Text>
        
        <View style={styles.statusContainer}>
          <Text style={styles.statusText}>
            {getStatusText()} ‚Ä¢ {progress}%
          </Text>
          <View style={styles.progressBarContainer}>
            <View style={[styles.progressBar, { width: `${progress}%` }]} />
          </View>
        </View>
        
        <Text style={styles.yarnTypeText}>–ü—Ä—è–∂–∞: {getYarnType()}</Text>
        <Text style={styles.dateText}>{getDateLabel()}</Text>
        <Text style={styles.calculationsCountText}>
          üßÆ {calculationsCount} —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫{getCalculationCountSuffix(calculationsCount)}
        </Text>
        
        <View style={styles.buttonsContainer}>
          <TouchableOpacity 
            style={styles.openButton}
            onPress={onPress}
          >
            <Text style={styles.openButtonText}>–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç</Text>
          </TouchableOpacity>
        </View>
      </View>
    </View>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ—ñ–ª—å—Ç—Ä–∞
const FilterDropdown = ({ currentFilter, onFilterChange }) => {
  const [expanded, setExpanded] = useState(false);
  
  const filters = [
    { key: 'all', label: '–í—Å—ñ –ø—Ä–æ—î–∫—Ç–∏' },
    { key: 'in_progress', label: '–í –ø—Ä–æ—Ü–µ—Å—ñ' },
    { key: 'completed', label: '–ó–∞–≤–µ—Ä—à–µ–Ω—ñ' },
    { key: 'planned', label: '–ù–µ –ø–æ—á–∞—Ç–æ' },
    { key: 'archived', label: '–ê—Ä—Ö—ñ–≤–æ–≤–∞–Ω—ñ' },
  ];
  
  const currentFilterLabel = filters.find(f => f.key === currentFilter)?.label || '–í—Å—ñ –ø—Ä–æ—î–∫—Ç–∏';
  
  return (
    <View style={styles.filterContainer}>
      <TouchableOpacity 
        style={styles.filterButton} 
        onPress={() => setExpanded(!expanded)}
      >
        <Text style={styles.filterButtonText}>
          –§—ñ–ª—å—Ç—Ä: {currentFilterLabel}
        </Text>
      </TouchableOpacity>
      
      {expanded && (
        <View style={styles.filterDropdown}>
          {filters.map(filter => (
            <TouchableOpacity
              key={filter.key}
              style={[styles.filterItem, filter.key === currentFilter && styles.filterItemActive]}
              onPress={() => {
                onFilterChange(filter.key);
                setExpanded(false);
              }}
            >
              <Text 
                style={[styles.filterItemText, filter.key === currentFilter && styles.filterItemTextActive]}
              >
                {filter.label}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      )}
    </View>
  );
};

// –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç—ñ–≤
const ProjectsList = ({ navigation }) => {
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ö—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
  const projectsHook = { projects: [], loading: false, error: null };
  try {
    Object.assign(projectsHook, useProjects());
  } catch (error) {
    console.error('Error using projects hook:', error);
  }
  
  const { projects, loading, error, fetchProjects, deleteProject } = projectsHook;
  const [refreshing, setRefreshing] = useState(false);
  const [filter, setFilter] = useState('all');
  
  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ—î–∫—Ç—ñ–≤
  const filteredProjects = projects.filter(project => {
    if (filter === 'all') return true;
    return project.status === filter;
  });
  
  // –ë–µ–∑–ø–µ—á–Ω–∏–π useEffect –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–ª—É—Ö–∞—á–∞
  useEffect(() => {
    if (!navigation || !navigation.addListener) {
      console.log('Navigation object is undefined or missing addListener method');
      return () => {};
    }
    
    try {
      const unsubscribe = navigation.addListener('focus', () => {
        fetchProjects && fetchProjects();
      });
      
      return unsubscribe;
    } catch (e) {
      console.error('Error in navigation listener setup:', e);
      return () => {};
    }
  }, [navigation, fetchProjects]);
  
  // –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  const handleRefresh = async () => {
    if (!fetchProjects) return;
    
    setRefreshing(true);
    try {
      await fetchProjects();
    } catch (e) {
      console.error('Error refreshing projects:', e);
    } finally {
      setRefreshing(false);
    }
  };
  
  // –§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
  const handleDeleteProject = (projectId) => {
    if (!deleteProject || !projectId) return;
    
    Alert.alert(
      '–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É',
      '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –ø—Ä–æ–µ–∫—Ç?',
      [
        { text: '–°–∫–∞—Å—É–≤–∞—Ç–∏', style: 'cancel' },
        { 
          text: '–í–∏–¥–∞–ª–∏—Ç–∏', 
          style: 'destructive',
          onPress: () => {
            try {
              deleteProject(projectId);
            } catch (e) {
              console.error('Error deleting project:', e);
            }
          }
        },
      ]
    );
  };
  
  // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  if (loading && !refreshing) {
    return (
      <View style={styles.centerContainer}>
        <ActivityIndicator size="large" color="#6B8A5E" />
        <Text style={styles.loadingText}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤...</Text>
      </View>
    );
  }
  
  // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
  if (error) {
    return (
      <View style={styles.centerContainer}>
        <Text style={styles.errorText}>
          –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}
        </Text>
        <TouchableOpacity 
          style={styles.retryButton}
          onPress={fetchProjects}
        >
          <Text style={styles.retryButtonText}>–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É</Text>
        </TouchableOpacity>
      </View>
    );
  }
  
  // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–æ—î–∫—Ç—ñ–≤
  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>–ú–æ—ó –ü—Ä–æ—î–∫—Ç–∏</Text>
      </View>
      
      <View style={styles.actionsContainer}>
        <FilterDropdown 
          currentFilter={filter} 
          onFilterChange={setFilter} 
        />
        
        <TouchableOpacity 
          style={styles.newProjectButton}
          onPress={() => {
            try {
              navigation && navigation.navigate && navigation.navigate('CreateProject');
            } catch (e) {
              console.error('Error navigating to CreateProject:', e);
            }
          }}
        >
          <Text style={styles.newProjectButtonText}>+ –ù–û–í–ò–ô –ü–†–û–Ñ–ö–¢</Text>
        </TouchableOpacity>
      </View>
      
      {(!filteredProjects || filteredProjects.length === 0) ? (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>
            {filter === 'all' 
              ? '–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø—Ä–æ—î–∫—Ç—ñ–≤' 
              : `–ù–µ–º–∞—î –ø—Ä–æ—î–∫—Ç—ñ–≤ –∑ —Å—Ç–∞—Ç—É—Å–æ–º "${filter === 'in_progress' ? '–í –ø—Ä–æ—Ü–µ—Å—ñ' : 
                  filter === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : 
                  filter === 'planned' ? '–ù–µ –ø–æ—á–∞—Ç–æ' : '–ê—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ'}"`
            }
          </Text>
          <TouchableOpacity 
            style={styles.createButton}
            onPress={() => {
              try {
                navigation && navigation.navigate && navigation.navigate('CreateProject');
              } catch (e) {
                console.error('Error navigating to CreateProject:', e);
              }
            }}
          >
            <Text style={styles.createButtonText}>–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <FlatList
          data={filteredProjects}
          renderItem={({ item }) => (
            <ProjectItem
              project={item}
              onPress={() => {
                try {
                  if (navigation && navigation.navigate && item && item.id) {
                    navigation.navigate('ProjectDetails', { projectId: item.id });
                  }
                } catch (e) {
                  console.error('Error navigating to ProjectDetails:', e);
                }
              }}
              onDelete={() => handleDeleteProject(item && item.id)}
            />
          )}
          keyExtractor={(item) => (item && item.id) ? item.id.toString() : Math.random().toString()}
          contentContainerStyle={styles.listContent}
          refreshing={refreshing}
          onRefresh={handleRefresh}
          ItemSeparatorComponent={() => <View style={styles.separator} />}
        />
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  centerContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  header: {
    padding: 16,
    paddingBottom: 8,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2E3E28',
  },
  actionsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  filterContainer: {
    position: 'relative',
    zIndex: 1000,
  },
  filterButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f1f5f0',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
  },
  filterButtonText: {
    color: '#4A6741',
    fontWeight: '500',
  },
  filterDropdown: {
    position: 'absolute',
    top: 36,
    left: 0,
    backgroundColor: '#fff',
    borderRadius: 8,
    width: 180,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    zIndex: 1001,
  },
  filterItem: {
    paddingVertical: 8,
    paddingHorizontal: 12,
  },
  filterItemActive: {
    backgroundColor: '#f1f5f0',
  },
  filterItemText: {
    color: '#4A6741',
  },
  filterItemTextActive: {
    fontWeight: 'bold',
    color: '#2E3E28',
  },
  newProjectButton: {
    backgroundColor: '#6B8A5E',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
  },
  newProjectButtonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  listContent: {
    padding: 16,
  },
  separator: {
    height: 1,
    backgroundColor: '#eee',
    marginVertical: 8,
  },
  projectItem: {
    backgroundColor: '#fff',
    borderRadius: 8,
    overflow: 'hidden',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 1,
  },
  projectContent: {
    padding: 16,
  },
  projectName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2E3E28',
    marginBottom: 8,
  },
  statusContainer: {
    marginBottom: 8,
  },
  statusText: {
    fontSize: 14,
    color: '#4A6741',
    marginBottom: 4,
  },
  progressBarContainer: {
    height: 8,
    backgroundColor: '#f1f5f0',
    borderRadius: 4,
    overflow: 'hidden',
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#6B8A5E',
  },
  yarnTypeText: {
    fontSize: 14,
    color: '#4A6741',
    marginBottom: 4,
  },
  dateText: {
    fontSize: 14,
    color: '#4A6741',
    marginBottom: 4,
  },
  calculationsCountText: {
    fontSize: 14,
    color: '#4A6741',
    marginBottom: 12,
  },
  buttonsContainer: {
    marginTop: 8,
  },
  openButton: {
    backgroundColor: '#6B8A5E',
    paddingVertical: 10,
    borderRadius: 8,
    alignItems: 'center',
  },
  openButtonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#4A6741',
  },
  errorText: {
    fontSize: 16,
    color: '#D32F2F',
    marginBottom: 16,
    textAlign: 'center',
  },
  retryButton: {
    backgroundColor: '#6B8A5E',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  emptyText: {
    fontSize: 16,
    color: '#4A6741',
    marginBottom: 16,
    textAlign: 'center',
  },
  createButton: {
    backgroundColor: '#6B8A5E',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 8,
  },
  createButtonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});

// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ displayName –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
ProjectsList.displayName = "ProjectsList";

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –±–µ–∑–ø–µ—á–Ω—É –æ–±–≥–æ—Ä—Ç–∫—É
import { createSafeNavigationComponent } from '../../utils/enhanceComponents';

// –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–≥–æ—Ä—Ç–∫—É (–∫–ª–∞—Å–æ–≤–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
export default createSafeNavigationComponent(ProjectsList, "ProjectsList");
